<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<mapper namespace="org.activiti.engine.impl.persistence.entity.WaitingTimerJobEntity">

  <!-- JOB DELETE STATEMENTS-->

  <delete id="deleteWaitingTimerJob" parameterType="org.activiti.engine.impl.persistence.entity.WaitingTimerJobEntity">
    delete from ${prefix}ACT_RU_TIMER_JOB where ID_ = #{id} and REV_ = #{revision}
  </delete>
  
  <delete id="bulkDeleteWaitingTimerJob" parameterType="java.util.Collection">
    delete from ${prefix}ACT_RU_TIMER_JOB where
     <foreach item="job" collection="list" index="index" separator=" or ">
        ID_ = #{job.id, jdbcType=VARCHAR}
    </foreach> 
  </delete>

  <delete id="deleteWaitingTimer" parameterType="org.activiti.engine.impl.persistence.entity.WaitingTimerJobEntityImpl">
    delete from ${prefix}ACT_RU_TIMER_JOB where ID_ = #{id} and REV_ = #{revision}
  </delete>
  
  <delete id="bulkDeleteWaitingTimer" parameterType="java.util.Collection">
    delete from ${prefix}ACT_RU_TIMER_JOB where
     <foreach item="job" collection="list" index="index" separator=" or ">
        ID_ = #{job.id, jdbcType=VARCHAR}
    </foreach> 
  </delete>

    <select id="selectUnlockedTimersByDuedate" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="waitingTimerJobResultMap">
        select RES.*
        from ${prefix}ACT_RU_TIMER_JOB RES
        LEFT OUTER JOIN ${prefix}ACT_RU_EXECUTION PI ON PI.ID_ = RES.PROCESS_INSTANCE_ID_
        where
         (RES.DUEDATE_ &lt; #{parameter, jdbcType=TIMESTAMP})
        and (
        (RES.EXECUTION_ID_ is null)
        or
        (PI.SUSPENSION_STATE_ = 1)
        )
        order by DUEDATE_
    </select>

    <select id="selectUnlockedTimersByDuedate" databaseId="oracle" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject"
            resultMap="waitingTimerJobResultMap">
        select RES.*
        from ${prefix}ACT_RU_TIMER_JOB RES
        LEFT OUTER JOIN ${prefix}ACT_RU_EXECUTION PI ON PI.ID_ = RES.PROCESS_INSTANCE_ID_
        where
       (RES.DUEDATE_ &lt; #{parameter, jdbcType=TIMESTAMP})
        and (RES.RETRIES_ &gt; 0)
        and (NVL(RES.EXECUTION_ID_ , 'UNDEF')='UNDEF' OR
        exists (select 1 from ${prefix}ACT_RU_EXECUTION PI where PI.ID_ =
        RES.PROCESS_INSTANCE_ID_ and PI.SUSPENSION_STATE_ = 1)
        )
        order by DUEDATE_
    </select>
  
  <!-- JOB RESULTMAP (FOR TIMER AND MESSAGE) -->

  <resultMap id="jobResultMap" type="org.activiti.engine.impl.persistence.entity.JobEntityImpl">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="revision" column="REV_" jdbcType="INTEGER" />
    <result property="lockOwner" column="LOCK_OWNER_" jdbcType="VARCHAR" />
    <result property="lockExpirationTime" column="LOCK_EXP_TIME_" jdbcType="TIMESTAMP" />
    <result property="exclusive" column="EXCLUSIVE_" jdbcType="BOOLEAN" />
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROCESS_INSTANCE_ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="retries" column="RETRIES_" jdbcType="INTEGER" />
    <result property="exceptionByteArrayRef" column="EXCEPTION_STACK_ID_" typeHandler="ByteArrayRefTypeHandler" />
    <result property="exceptionMessage" column="EXCEPTION_MSG_" jdbcType="VARCHAR" />
    <result property="jobHandlerType" column="HANDLER_TYPE_" jdbcType="VARCHAR" />
    <result property="jobHandlerConfiguration" column="HANDLER_CFG_" jdbcType="VARCHAR" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
      <result property="duedate" column="DUEDATE_" jdbcType="TIMESTAMP" />
  </resultMap>

  <resultMap id="waitingTimerJobResultMap" type="org.activiti.engine.impl.persistence.entity.WaitingTimerJobEntityImpl" extends="jobResultMap">
    <result property="repeat" column="REPEAT_" jdbcType="VARCHAR" />
  </resultMap>



  <!-- JOB SELECT (FOR TIMER AND MESSAGE) -->  

  <select id="selectWaitingTimerJob" parameterType="string" resultMap="waitingTimerJobResultMap">
    select * from ${prefix}ACT_RU_TIMER_JOB where ID_ = #{id, jdbcType=VARCHAR}
  </select>

    <select id="selectWaitingTimerJobByQueryCriteria" parameterType="org.activiti.engine.impl.JobQueryImpl" resultMap="waitingTimerJobResultMap">
        ${limitBefore}
        select RES.* ${limitBetween}
        <include refid="selectWaitingTimerJobByQueryCriteriaSql"/>
        ${orderBy}
        ${limitAfter}
    </select>

    <select id="selectWaitingTimerJobCountByQueryCriteria" parameterType="org.activiti.engine.impl.JobQueryImpl" resultType="long">
        select count(distinct RES.ID_)
        <include refid="selectWaitingTimerJobByQueryCriteriaSql"/>
    </select>


    <sql id="selectWaitingTimerJobByQueryCriteriaSql">
        from ${prefix}ACT_RU_TIMER_JOB RES
        <if test="executable">
            LEFT OUTER JOIN ${prefix}ACT_RU_EXECUTION PI ON PI.ID_ = RES.PROCESS_INSTANCE_ID_
        </if>
        <where>
            <if test="id != null">
                RES.ID_ = #{id}
            </if>
            <if test="processInstanceId != null">
                and RES.PROCESS_INSTANCE_ID_ = #{processInstanceId}
            </if>
            <if test="executionId != null">
                and RES.EXECUTION_ID_ = #{executionId}
            </if>
            <if test="processDefinitionId != null">
                and RES.PROC_DEF_ID_ = #{processDefinitionId}
            </if>
            <if test="retriesLeft">
                and RES.RETRIES_ &gt; 0
            </if>
            <if test="noRetriesLeft">
                and RES.RETRIES_ &lt;= 0
            </if>
            <if test="executable">
                and (RES.RETRIES_ &gt; 0)
                and (RES.DUEDATE_ is null or RES.DUEDATE_ &lt;= #{now, jdbcType=TIMESTAMP})
                and (
                (RES.EXECUTION_ID_ is null)
                or
                (PI.SUSPENSION_STATE_ = 1)
                )
            </if>
            <if test="onlyTimers">
                and RES.TYPE_ = 'timer'
            </if>

            <if test="duedateHigherThan != null">
                and RES.DUEDATE_ &gt; #{duedateHigherThan}
            </if>
            <if test="duedateLowerThan != null">
                and RES.DUEDATE_ &lt; #{duedateLowerThan}
            </if>
            <if test="duedateHigherThanOrEqual != null">
                and RES.DUEDATE_ &gt;= #{duedateHigherThanOrEqual}
            </if>
            <if test="duedateLowerThanOrEqual != null">
                and RES.DUEDATE_ &lt;= #{duedateLowerThanOrEqual}
            </if>
            <if test="withException">
                and (RES.EXCEPTION_MSG_ is not null or RES.EXCEPTION_STACK_ID_ is not null)
            </if>
            <if test="exceptionMessage">
                and RES.EXCEPTION_MSG_ = #{exceptionMessage}
            </if>
            <if test="tenantId != null">
                and RES.TENANT_ID_ = #{tenantId}
            </if>
            <if test="tenantIdLike != null">
                and RES.TENANT_ID_ like #{tenantIdLike}
            </if>
            <if test="withoutTenantId">
                and (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
            </if>
        </where>
    </sql>

    <select id="selectTimerJobsToDueDate" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="waitingTimerJobResultMap">
        select
        ID_,
        REV_ ,
        TYPE_ ,
        EXCLUSIVE_ ,
        EXECUTION_ID_ ,
        PROCESS_INSTANCE_ID_ ,
        PROC_DEF_ID_ ,
        RETRIES_ ,
        EXCEPTION_STACK_ID_ ,
        EXCEPTION_MSG_ ,
        DUEDATE_ ,
        REPEAT_ ,
        HANDLER_TYPE_,
        HANDLER_CFG_ ,
        TENANT_ID_
        from ${prefix}ACT_RU_TIMER_JOB
        where DUEDATE_ is null or DUEDATE_ &lt;= #{parameter, jdbcType=TIMESTAMP};
    </select>

    <!-- TIMER INSERT -->

  <insert id="insertWaitingTimerJob" parameterType="org.activiti.engine.impl.persistence.entity.WaitingTimerJobEntityImpl">
    insert into ${prefix}ACT_RU_TIMER_JOB (
            ID_, 
            REV_,
            TYPE_,
            EXCLUSIVE_,
            EXECUTION_ID_, 
            PROCESS_INSTANCE_ID_,
            PROC_DEF_ID_,
            RETRIES_, 
            EXCEPTION_STACK_ID_,
            EXCEPTION_MSG_,
            DUEDATE_,
            REPEAT_,
            HANDLER_TYPE_,
            HANDLER_CFG_,
            TENANT_ID_)
    values (#{id, jdbcType=VARCHAR},
            1,
            #{jobType, jdbcType=VARCHAR},
            #{exclusive, jdbcType=BOOLEAN},
            #{executionId, jdbcType=VARCHAR},
            #{processInstanceId, jdbcType=VARCHAR},
            #{processDefinitionId, jdbcType=VARCHAR},
            #{retries, jdbcType=INTEGER},
            #{exceptionByteArrayRef, typeHandler=ByteArrayRefTypeHandler},
            #{exceptionMessage, jdbcType=VARCHAR},
            #{duedate, jdbcType=TIMESTAMP},
            #{repeat, jdbcType=VARCHAR},
            #{jobHandlerType, jdbcType=VARCHAR},
            #{jobHandlerConfiguration, jdbcType=VARCHAR},
            #{tenantId, jdbcType=VARCHAR}
    )
  </insert>


    <update id="updateWaitingTimerJob" parameterType="org.activiti.engine.impl.persistence.entity.WaitingTimerJobEntityImpl">
        update ${prefix}ACT_RU_TIMER_JOB
        <set>
            REV_ =  #{revisionNext, jdbcType=INTEGER},
            RETRIES_ = #{retries, jdbcType=INTEGER},
            EXCEPTION_STACK_ID_ = #{exceptionByteArrayRef, typeHandler=ByteArrayRefTypeHandler},
            EXCEPTION_MSG_ = #{exceptionMessage, jdbcType=VARCHAR},
            DUEDATE_ = #{duedate, jdbcType=TIMESTAMP}
        </set>
        where ID_= #{id, jdbcType=VARCHAR}
        and REV_ = #{revision, jdbcType=INTEGER}
    </update>


    <select id="selectWaitingTimerJobByTypeAndProcessDefinitionId" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="waitingTimerJobResultMap">
        select J.*
        from ${prefix}ACT_RU_TIMER_JOB J
        where J.HANDLER_TYPE_ = #{parameter.handlerType}
        and J.PROC_DEF_ID_ = #{parameter.processDefinitionId}
    </select>

    <select id="selectWaitingTimerJobsByExecutionId" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="waitingTimerJobResultMap">
        select *
        from ${prefix}ACT_RU_TIMER_JOB J
        where J.EXECUTION_ID_ = #{parameter}
    </select>



    <select id="selectWaitingTimerJobByTypeAndProcessDefinitionKeyNoTenantId" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="waitingTimerJobResultMap">
        select J.*
        from ${prefix}ACT_RU_TIMER_JOB J
        inner join ${prefix}ACT_RE_PROCDEF P on J.PROC_DEF_ID_ = P.ID_
        where J.HANDLER_TYPE_ = #{parameter.handlerType}
        and P.KEY_ = #{parameter.processDefinitionKey}
        and (P.TENANT_ID_ = ''  or P.TENANT_ID_ is null)
    </select>

    <select id="selectWaitingTimerJobByTypeAndProcessDefinitionKeyAndTenantId" parameterType="org.activiti.engine.impl.db.ListQueryParameterObject" resultMap="waitingTimerJobResultMap">
        select J.*
        from ${prefix}ACT_RU_TIMER_JOB J
        inner join ${prefix}ACT_RE_PROCDEF P on J.PROC_DEF_ID_ = P.ID_
        where J.HANDLER_TYPE_ = #{parameter.handlerType}
        and P.KEY_ = #{parameter.processDefinitionKey}
        and P.TENANT_ID_ = #{parameter.tenantId}
    </select>


    <!-- JOB UPDATE STATEMENTS -->
    <update id="updateWaitingTimerJobTenantIdForDeployment" parameterType="java.util.Map">
        update ${prefix}ACT_RU_TIMER_JOB set
        TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}
        where
        ID_ in (
        SELECT J.ID_ from ${prefix}ACT_RU_TIMER_JOB J
        inner join ${prefix}ACT_RE_PROCDEF P on J.PROC_DEF_ID_  = P.ID_
        inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_
        where D.ID_ = #{deploymentId, jdbcType=VARCHAR}
        )
    </update>

    <!-- See http://stackoverflow.com/questions/4429319/you-cant-specify-target-table-for-update-in-from-clause
     Tested this on MySQL 5.6: does NOT use a temporary table (so good, performance) -->
    <update id="updateWaitingTimerJobTenantIdForDeployment" databaseId="mysql" parameterType="java.util.Map">
        update ${prefix}ACT_RU_TIMER_JOB set
        TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}
        where
        ID_ in (

        SELECT tempTask.tempId
        FROM (
        SELECT J.ID_ as tempId
        FROM  ${prefix}ACT_RU_TIMER_JOB J
        inner join ${prefix}ACT_RE_PROCDEF P on J.PROC_DEF_ID_  = P.ID_
        inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_
        where D.ID_ = #{deploymentId, jdbcType=VARCHAR}

        ) AS tempTask

        )
    </update>


</mapper>
